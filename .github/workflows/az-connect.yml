name: Test AzureAD - OIDC
on: [workflow_dispatch]

permissions:
      id-token: write
      contents: read
      
jobs:  
  install-dependencies:
    name: Install dependencies
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
  Windows-latest:
      runs-on: windows-latest
      steps:
        - name: OIDC Login to Azure Public Cloud with AzPowershell (enableAzPSSession true)
          uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} 
            enable-AzPSSession: true

        - uses: actions/github-script@v6
          id: script
          timeout-minutes: 10
          with:
              debug: true
              script: |
                const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN']
                const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL']
                core.setOutput('TOKEN', token.trim())
                core.setOutput('IDTOKENURL', runtimeUrl.trim())

        #- uses: actions/checkout@v3
        - name: Install from PSGallery
          shell: pwsh
          run: |
            Set-PSRepository PSGallery -InstallationPolicy Trusted            
            Write-Output "Installing AzureAD"
            Install-Module AzureAD     
            $path = (Get-Module -ListAvailable Az*) |Select-Object Path,Version, Name |Where-Object -Property "Name" -EQ -Value "AzureAD"
            $($path.Path)
            $moduleBasePath = "C:\Modules\"
            if(Test-Path -Path "$moduleBasePath\$($path.Name.ToLower())_$($path.Version)"){
                Write-Output "'$moduleBasePath\$($path.Name.ToLower())_$($path.Version)' path already exists"
            }else{    
                Write-Output "Creating folder '$($path.Name.ToLower())_$($path.Version)' inside path '$moduleBasePath'"
                MKDIR "$moduleBasePath\$($path.Name.ToLower())_$($path.Version)"    
            }
            $replaceString = "\$($path.Version)\$($path.Name).psd1"
            $modulePath = $($path.Path).Replace($replaceString,"")
            if(Test-Path -Path "$moduleBasePath\$($path.Name.ToLower())_$($path.Version)\$($path.Name)\$replaceString"){
                Write-Output "'$($path.Path)' path already exists"
            }else{              
                Copy-Item -Path $modulePath -Destination "$moduleBasePath\$($path.Name.ToLower())_$($path.Version)" -Recurse
            }
            Write-Output "Importing AzureAD module"
            Import-Module -Name AzureAD
            
            $GitToken = "${{steps.script.outputs.TOKEN}}"
            $Audience = "api://AzureADTokenExchange"
            $GitTokenUrl = "${{steps.script.outputs.IDTOKENURL}}"
            Write-Output "Calling Connect-AzureAD"
            $apiUrl = "{0}&audience={1}" -f $GitTokenUrl, $Audience
            Write-Host "GitHub JWT url: $apiUrl"
            Write-Host "GitHub JWT url: $GitToken"                  
            $jwt_tokens = Invoke-RestMethod $apiUrl -Headers @{Authorization = ("bearer {0}" -f $GitToken) }

            Write-Host "GitHub JWT url: $apiUrl"
            Write-Host "GitHub JWT payload:"             
            $federatedToken = ($jwt_tokens.Value -split "\.")[1]
                if (($federatedToken.Length % 4) -ne 0) {
                    $federatedToken = $federatedToken.PadRight($federatedToken.Length + 4 - ($federatedToken.Length % 4), "=")
                }
            [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($federatedToken)) | convertfrom-json | convertto-json # Pretty print

            Disable-AzContextAutosave -Scope Process
            Connect-AzAccount -ServicePrincipal -ApplicationId $AADAppId -Tenant $AADTenant -FederatedToken $($jwt_tokens.Value) -Environment 'azurecloud' | out-null
            $context = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext
            $aadToken = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $context.Tenant.Id.ToString(), $null, [Microsoft.Azure.Commands.Common.Authentication.ShowDialog]::Never, $null, "https://graph.windows.net").AccessToken
            Connect-AzureAD -AadAccessToken $aadToken -AccountId $context.Account.Id -TenantId $context.tenant.id


            Write-Output "Fetching AzureAD users"
            Get-AzureADUser -All $true

        - name: 'Get RG with powershell action'
          uses: azure/powershell@v1
          with:
             inlineScript: |   
               Get-AzResourceGroup 
             azPSVersion: "latest"
